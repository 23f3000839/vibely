// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  clerkId       String    @unique
  username      String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  ownedRooms    Room[]    @relation("RoomOwner")
  participations RoomParticipant[]
  messages      Message[]
}

model Room {
  id          String    @id @default(cuid())
  name        String
  description String?
  isPublic    Boolean   @default(true)
  maxUsers    Int       @default(10)
  password    String?
  topics      String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  ownerId     String
  owner       User      @relation("RoomOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  participants RoomParticipant[]
  messages    Message[]
}

model RoomParticipant {
  id        String    @id @default(cuid())
  userId    String
  roomId    String
  isMuted   Boolean   @default(false)
  isDeafen  Boolean   @default(false)
  hasVideo  Boolean   @default(true)
  joinedAt  DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  room      Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  timestamp DateTime @default(now())
  roomId    String
  senderId  String
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([roomId])
  @@index([senderId])
}